테이블에 유효하지 않은 데이터가 입력되는 것을 방지한다.
해당 테이블에 데이터가 추가, 삭제, 변경될 때마다 무결성 제약조건을 검사한다.

종류
- NOT NULL 제약조건
  해당 컬럼에 NULL값이 입력되지 못하도록 지정한다.
  고객테이블의 이름컬럼, 도서테이블의 제목컬럼, 상품테이블의 상품명컬럼
  예시) 
        CREATE TABLE USER (
                USER_NO NUMBER(8)
                USER_ID VARCHAR2(20)       NOT NULL.
                USER_NAME VARCHAR2(100)    NOT NULL,
                USER_PASSWORD VARCHAR2(20) NOT NULL,
                USER_EMAIL VARCHAR2(255)   NOT NULL,
                USER_TEL VARCHAR2(20)
        )
        * 아이디, 이름, 비밀번호, 이메일은 NULL 값을 허용하지 않는다.
        * 새로운 사용자행을 추가할 때 아이디, 이름, 비밀번호, 이메일은 필수 입력값이다.
        * 하나의 테이블안에서 NOT NULL 제약조건이 지정된 컬럼은 여러 개 가능하다.
        * NOT NULL 제약조건을 컬럼 단위로만 지정할 수 있고, 2개 이상의 컬럼을 묶어서 지정할 수는 없다.

- UNIQUE 제약조건(고유키 제약조건)
   해당 컬럼의 값은 테이블전체에서 고유한 값을 가져야한다.(중복값을 허용하지 않는다.)
   만약, 해당 컬럼에 NULL값이 허용된다면 NULL값을 입력하는 것은 가능하다.
  고객테이블의 핸드폰번호, 사원테이블의 주민번호컬럼, 학생테이블의 이메일컬럼
   예시) 
        CREATE TABLE USER (
                USER_NO NUMBER(8)
                USER_ID VARCHAR2(20)       NOT NULL
                USER_NAME VARCHAR2(100)    NOT NULL,
                USER_PASSWORD VARCHAR2(20) NOT NULL,
                USER_EMAIL VARCHAR2(255)   NOT NULL
                USER_TEL VARCHAR2(20)      

                UNIQUE (USER_ID)
                UNIQUE (USER_EMAIL)
                UNIQUE (USER_TEL)
        );

        CREATE TABLE JOB_HISTORY (
                EMP_ID NUMBER(4),
                START_DATE DATE(20) NOT NULL,

                UNIQUE (EMP_ID, START_DATE)
        );
        * 직종변경이력 테이블에서 직원아이디와 시작날짜를 합한 값은 언제나 고유해야 한다.
        

        CREATE TABLE SCHOOL_REQ_COURSE (
                YEAR NUMBER(4)
                TERM CHAR(1)
                STUDENT_ID NUMBER(8)
                COURSE_NO NUMBER(6)

                UNIQUE (YEAR, TERM, STUDENT, COURSE)
        );
        * 수강신청 테이블에서 수강년도, 학기, 학번, 신청과정을 합한 값은 언제나 고유해야 한다.
        YEAR  TERM  STUDENT_NO  COURSE_NO
        ------------------------------------
        2024  1     240010100    100000
        
        * 아이디, 이메일, 전화번호값은 고유한 값을 가져야한다.
        * 전화번호는 NULL을 허용함으로 NULL값을 입력해도 상관없다.
        * 전화번호가 NULL 인 행이 여러 개 있는 것도 상관없다(NULL 값은 중복여부 체크대상이 아니다.)
        * UNIQUE 제약조건은 컬럼 단위로 지정할 수 있고, 2개 이상의 경우 컬럼을 묶어서 지정할 수 있다.

- PRIMARY KEY 제약조건(기본키 제약조건)
   하나의 테이블에서 각 행을 고유하게 식별할 수 있는 값을 가지는 컬럼에 적용하는 제약조건이다.
   기본키 제약조건이 지정된 컬럼은 NULL값을 허용하지 않으며 값의 중복도 허용하지 않는다.
   기본키 제약조건은 (NOT NULL 제약조건 + UNIQUE 제약조건)과 비슷한 성질을 가진다.
   기본키 제약조건은 테이블당 하나만 지정할 수 있다.
   기본키 제약조건이 지정된 컬럼의 값은 특별한 정보를 포함하지 않으며 대부분 단순한 숫자형식의 값으로 설정하는 것이 좋다.
   (기본키 컬럼의 값으로 숫자가 아닌 형식의 값도 가능하지만,숫자일 때 SQL 실행속도가 더 빠르다.)
   실행속도가 중요한 업무인 경우 가상의 숫자값을 가지는 컬럼을 추가하고, 해당 컬럼의 기본키로 설정하는 것이 좋다.
   기본키 제약조건은 하나의 컬럼에 지정할 수도 있고, 2개 이상의 컬럼을 묶어서 지정할 수도 있다.
   학생테이블의 학번, 사원테이블의 사원번호, 과목테이블 과목코드, 택배테이블의 송장번호
   예) 
        CREATE TABLE USER (
                USER_NO NUMBER(8)
                USER_ID VARCHAR2(20)       NOT NULL
                USER_NAME VARCHAR2(100)    NOT NULL,
                USER_PASSWORD VARCHAR2(20) NOT NULL,
                USER_EMAIL VARCHAR2(255)   NOT NULL
                USER_TEL VARCHAR2(20)      

                PRIMARY KEY(USER_NO)
        );

        CREATE TABLE COURSE_REQUEST (
              STUDENT_NO      NUMBER(8),
              COURSE_NO       CHAR(6),
              ..
              PRIMARY KEY (STUDENT_NO, COURSE_NO)
        )
        * 2개 이상의 컬럼을 묶어서 기본키 제약조건을 적용할 수 있다.
        * 기본키 제약조건이 적용된 컬럼에 NOT NULL 제약조건은 적용할 필요가 없다.
          (기본키 제약조건에는 NOT NULL + UNIQUE 제약조건이 포함되어 있다.)

- FOREIGN KEY 제약조건(외래키 제약조건, 참조키 제약조건)
  해당 컬럼의 값은 참조하는 컬럼(다른 테이블의 컬럼 혹은 같은 테이블의 컬럼)이 가지고 있는 값만 허용하는 제약조건이다.
  참조하는 컬럼이 있는 테이블은 부모테이블이 된다. 외래키 제약조건이 적용된 컬럼이 잇는 테이블은 자식테이블이 된다.
  반드시 기본키 제약조건 혹은 고유키 제약조건이 적용된 컬럼만 참조할 수 있다. 
  (자식테이블에서 참조하는 컬럼에 똑같은 값을 가지고 있는 행이 있으면, 어떤 행을 참조하는지 모호해지기 때문이다.)
  외래키 제약조건이 지정된 컬럼이라도 NOT NULL 제약조건이 지정되지 않았다면 NULL 값을 가질 수 있다.
  예시) 
        부모테이블(외래키가 참조하는 커럶을 가지고 있는 테이블)
        CREATE TABLE CATEGORIES(
                  CAT_NO NUMBER(3) PRIMARY KEY,
                  CAT_NAME VARCHAR2(100)
        );
    -------------------------------------
        CAT_NO    CAT_NAME
        100        소설
        101        인문
        102        외국어
        103        IT/컴퓨터
    -------------------------------------
    자식테이블(외래키를 가지고 있는 테이블)
    CREATE TABLE BOOKS (
            BOOK_NO      NUMBER(4) PRIMARY KEY,
            CAT_NO       NUMBER(3) REFERENCES CATEGORIES (CAT_NO),
            BOOK_TITLE   VARCHAR2(255) NOT NULL
    )
    * BOOKS 테이블의 CAT_NO는 외래키 제약조건이 적용된 컬럼이다.
    * BOOKS 테이블의 CAT_NO는 CATEGORIES 테이블의 CAT_NO 컬럼의 값을 참조한다.
    -------------------------------------------------
    BOOK_NO  CAT_NO  BOOK_TITLE ....
    -------------------------------------------------
    1000      100     언젠가 우리가 같은 별을 바라본다면
    1001      100     모순
    1002      100     나의 돈키호테
    1003      103     DO it! 점프 투 파이썬
    --------------------------------------------------
    * CATEGORIES 테이블의 100번 행과 103번 행은 각각 자식레코드가 존재한다.
    * 자식 레코드가 발견된 100번, 103번 행은 CATEGORIES 테이블에서 삭제할 수 없다.
    * 자식 레코드가 발견되지 않은 101번, 102번 행은 CATEGORIES 테이블에서 삭제할 수 있다.
- CHECK 제약조건
  해당 컬럼은 제시된 조건을 만족하는 값만 허용된다.
  아래 예시에서()괄호안에 제시된 조건이 TRUE로 판정되는 값만 저장이 허용된다.
  CHECK 계약조건은 하나의 컬럼마다 지정할 수 있고, 2개이상의 컬럼은 묶어서 지정할 수 없다.
  예) CREATE TABLE PRODUCT (
          PRODUCT_NO  NUMBER(8),
          ...
          PRODUCT_PRICE         NUMVER(7)      CHECK(PRODUCT_PRICE >= 0),
          PRODUCT_DISCOUNT_RATE NUMBER (3, 2)  CHECK(PRIDUCT_DISCOUNT_RATE BETWEEN 0.0 AND 0.75),
          PRODUCT_STATUS        VARCHAR2(20),  CHECK(PRODUCT_STATUS IN ('입고대기' , '판매중', '절판')),
          ...
  )


-----------------------------------------------------------------------------------------------------
CREATE TABLE MALL_USERS (
        USER_NO                         NUMBER(8),
        USER_ID                           VARCHAR2(100)     CONSTRAINT MALLUSER_ID_NN NOT NULL,
        USER_PASSWORD          VARCHAR2(100)     CONSTRAINT MALLUSER_PWD_NN NOT NULL,
        USER_NAME                   VARCHAR2(100)     CONSTRAINT MALLUSER_NAME_NN NOT NULL,
        USER_EMAIL                   VARCHAR2(255)     CONSTRAINT MALLUSER_EMAIL NOT NULL,
        USER_TEL                         VARCHAR2(50),
        USER_GENDER               CHAR(1),                  CONSTRAINT MALLUSER_GENDER_CK CHECK (USER_GENDER IN ('남', '여')),
        USER_POSTAL_CODE    CHAR(5),
        USER_ADDRESS              VARCHAR2(255),
        USER_CREATED_DATE  DATE,
        USER_UPDATED_DATE DATE,
        
        CONSTRAINT MALLUSER_NO_PK PRIMARY KEY(USER_NO),
        CONSTRAINT MALLUSER_ID_UK UNIQUE (USER_ID),
        CONSTRAINT MALLUSER_EMAIL_UK UNIQUE (USER_EMAIL),
        CONSTRAINT MALLUSER_TEL_UK UNIQUE (USER_TEL)
        );
        
DROP TABLE MALL_USERS;

INSERT INTO MALL_USERS
(USER_NO, USER_ID, USER_PASSWORD, USER_NAME, USER_EMAIL, USER_GENDER)
VALUES
(100 , 'HONG', 'ZXCV1234' , '홍길동', 'hong@gmail.com', '남');

/*
쇼핑몰 자유 게시판 
    게시글 번호 
            PRIMARY 제약조건
    게시판 제목
            NOT NULL 제약조건
    게시글 작성자번호
            NOT NULL 제약조건
            FOREIGN KEY 제약조건 - 가입한 사용자 번호 중 하나가 와야된다.
    게시글 내용
            NOT NULL 제약조건    
*/
CREATE TABLE MALL_POSTS (
        POST_NO                           NUMBER(7),
        POST_TITLE                        VARCHAR2(255)       NOT NULL,
        POST_WRITER                   NUMBER(8)                NOT NULL,
        POST_CONTENT                VARCHAR2(2000)     NOT NULL,
        POST_CREATED_DATE    DATE                           DEFAULT SYSDATE,
        
        CONSTRAINT POST_NO_PK PRIMARY KEY (POST_NO),
        CONSTRAINT POST_WINTER_FK FOREIGN KEY (POST_WRITER) REFERENCES MALL_USERS (USER_NO)
        );

INSERT INTO MALL_POSTS
(POST_NO, POST_TITLE, POST_WRITER, POST_CONTENT)
VALUES
(1001, '게시글1001', 200, '연습입니다.');
위의 테이블을 데이터베이스에 입력하였습니다.

- 부모테이블의 데이터를 수정/삭제할 때 주의사항
  자식테이블에서 현재 참조중인 행은 삭제할 수 없다.
  (자식레코드가 없는 부모테이블의 행은 삭제가능하다.)
  100, 200 번 사용자는 POST 테이블에 자식레코드가 각각 하나씩 있기 때문에 해당 사용자 정보는 삭제할 수 없다.
  자식 테이블에서 현재 참조중인 행은 외래키 컬럼이 참조하는 부모테이블의 컬럼값(외래키 컬럼이 참조하는 컬럼)을 수정할 수 없다.

테이블의 종류
- 원장성 테이블(Master Table)
    업무의 핵심 테이블이다.
    많은 자식 테이블을 거느리고 있다.

    쇼핑몰 업무를 예시로 볼때 원장성 테이블 목록 
        고객정보 테이블
        카드정보 테이블
        상품정보 테이블

- 거래성 테이블(Transaction Table)
      행위 테이블(Behavior Table)이다.
      업무가 진행됨에 따라 데이터가 등록되는 테이블이다.
    쇼핑몰 업무를 예시로 볼때 거래성 테이블
        주문내역 테이블
        문의내역 테이블
        배송내역 테이블
        카드결제내역 테이블

- 이력 테이블(History Table)
      원장성 테이블의 변경 이력정보를 저장하는 테이블이다.
      원장성 테이블의 외부에 원장성 테이블과 유사한 형태의 테이블을 생성하고, 원장성 테이블의 상태변경정보를 날짜별로 구분해서
      저장하는 테이블이다.
